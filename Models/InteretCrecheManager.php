<?php

include_once('AbstractEntityManager.php');

class InteretCrecheManager extends AbstractEntityManager {

    public $db;

    // InsÃ¨re les interets avec les id identifiant et contact
    
public function insertInteretCreche($idContact, $niveau, $localisationId) {
    // VÃ©rifie si $niveau est vide (""), si oui, on arrÃªte la fonction
    if ($niveau === "" || $niveau === null) {
        return; // Stoppe l'exÃ©cution
    }
        $sql = 'INSERT INTO interetcreche (idContact, niveau, idLocalisation) 
                VALUES (:idContact, :niveau, :idLocalisation)';

        $result =$this->db->query($sql, [
            'idContact' => $idContact,
            'niveau' => $niveau,
            'idLocalisation' => $localisationId
        ]);

        return $result; // Assure que la fonction retourne un boolÃ©en
    }

    public function getInteretCrechesByContact($idContact) {
        try {
            $sql = "SELECT i.niveau, l.identifiant, i.date_colonne
                    FROM interetCreche i
                    JOIN localisations l ON i.idLocalisation = l.idLocalisation
                    WHERE i.idContact = :idContact";

            $query = $this->db->query($sql, ['idContact' => $idContact]);
            $result = $query->fetchAll(PDO::FETCH_ASSOC);
    
            $interets = [];
            foreach ($result as $row) {
                $interets[] = new InteretCreche($row); // ðŸ”¥ On passe un tableau
            }
    
            return $interets;
    
        } catch (PDOException $e) {
            return [];
        }
    }

    public function getContactsByIdentifiant($identifiant)
    {
        $sql = 'SELECT 
                    c.idContact, 
                    c.contact,
                    c.nom, 
                    c.telephone, 
                    c.email, 
                    i.niveau, 
                    l.identifiant
                FROM interetCreche i
                JOIN contacts c ON i.idContact = c.idContact
                JOIN localisations l ON i.idLocalisation = l.idLocalisation
                WHERE l.identifiant = :identifiant';

        $stmt = $this->db->query($sql, [':identifiant' => $identifiant]);

        $contacts = [];
        while ($row = $stmt->fetch()) {
            $contact = new Contact([
                'idContact' => $row['idContact'],
                'contact'=> $row['contact'],
                'nom' => $row['nom'],
                'telephone' => $row['telephone'],
                'email' => $row['email'],
                'niveau' => $row['niveau'],
                'identifiant' => $row['identifiant'] // ici on rÃ©cupÃ¨re l'identifiant de la crÃ¨che
            ]);
            $contacts[] = $contact;
        }
        
        return $contacts;
    }

    // MÃ©thode pour obtenir le nombre de crÃ¨ches associÃ©es Ã  un contact
    public function getNbCrechesByContactId($idContact) {
        // RequÃªte pour compter le nombre de crÃ¨ches pour ce contact
        $query = "SELECT COUNT(*) AS nbCreches
                    FROM localisations
                    WHERE idContact = :idContact";

        // Utilisation du gestionnaire de DB pour exÃ©cuter la requÃªte et obtenir les rÃ©sultats sous forme de tableau
        $stmt = DBManager::getInstance()->query($query, ['idContact' => $idContact]);

        // RÃ©cupÃ©rer le rÃ©sultat sous forme de tableau
        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        // Retourne le nombre de crÃ¨ches ou 0 si aucune crÃ¨che n'est trouvÃ©e
        return $result['nbCreches'] ?? 0;
    }

     // MÃ©thode pour vÃ©rifier si un contact est intÃ©ressÃ© par le dÃ©partement de la crÃ¨che
     public function isContactInterestedInCrecheDepartment($idContact, $identifiantCreche) {
        // RequÃªte pour obtenir l'ID du dÃ©partement associÃ© Ã  la crÃ¨che
        $sql = "
            SELECT l.idDepartement
            FROM localisations l
            WHERE l.identifiant = :identifiant
        ";

        // ExÃ©cuter la requÃªte pour rÃ©cupÃ©rer l'ID du dÃ©partement
        $this->db->query($sql, ['identifiant' => $identifiantCreche]);

        // RÃ©cupÃ©rer l'ID du dÃ©partement de la crÃ¨che
        $departement = $this->db->fetch(PDO::FETCH_ASSOC);

        if ($departement) {
            // Si on trouve un dÃ©partement, on vÃ©rifie dans la table interetdepartements si ce contact est intÃ©ressÃ©
            $sql = "
                SELECT COUNT(*) AS interestCount
                FROM interetdepartement i
                WHERE i.idContact = :idContact
                  AND i.idDepartement = :idDepartement
            ";

            // ExÃ©cuter la requÃªte de vÃ©rification d'intÃ©rÃªt du contact pour ce dÃ©partement
            $stmt = $this->db->query($sql, [
                'idContact' => $idContact,
                'idDepartement' => $departement['idDepartement']
            ]);

            // RÃ©cupÃ©rer le rÃ©sultat
            $result = $stmt->fetch(PDO::FETCH_ASSOC);

            // Si interestCount > 0, cela signifie que le contact est intÃ©ressÃ© par ce dÃ©partement
            return $result['interestCount'] > 0;
        }

        return false;  // Si aucun dÃ©partement n'est trouvÃ©, on retourne false
    }

    // VÃ©rifier si un contact est interessÃ© par un dÃ©partement
    public function isContactInterestedInDepartment($idContact, $idDepartement) {
        // RequÃªte SQL pour vÃ©rifier si le contact est intÃ©ressÃ© par ce dÃ©partement
        $sql = "SELECT COUNT(*) as interestCount 
                FROM interetdepartement
                WHERE idContact = :idContact 
                AND idDepartement = :idDepartement";

        // ExÃ©cuter la requÃªte avec les paramÃ¨tres
        $stmt = $this->db->query($sql, [
            'idContact' => $idContact,
            'idDepartement' => $idDepartement
        ]);

        // RÃ©cupÃ©rer le rÃ©sultat
        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        // Si interestCount > 0, cela signifie que le contact est intÃ©ressÃ© par ce dÃ©partement
        return $result['interestCount'] > 0;
    }

    // VÃ©rifier si un contact est interessÃ© par une ville
    public function isContactInterestedInCity($idContact, $idVille) {
        // RequÃªte SQL pour vÃ©rifier si le contact est intÃ©ressÃ© par ce dÃ©partement
        $sql = "SELECT COUNT(*) as interestCount 
                FROM interetville
                WHERE idContact = :idContact 
                AND idVille = :idVille";

        // ExÃ©cuter la requÃªte avec les paramÃ¨tres
        $stmt = $this->db->query($sql, [
            'idContact' => $idContact,
            'idVille' => $idVille
        ]);

        // RÃ©cupÃ©rer le rÃ©sultat
        $result = $stmt->fetch(PDO::FETCH_ASSOC);

        // Si interestCount > 0, cela signifie que le contact est intÃ©ressÃ© par ce dÃ©partement
        return $result['interestCount'] > 0;
    }

}


    